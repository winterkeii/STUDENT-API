package com.medina.student;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.View;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository StudentRepository;
    @Autowired
    private View error;



            @GetMapping(path = "/medina/students")
            public @ResponseBody Iterable<Student> getAllUsers() {
                // This returns a JSON or XML with the users
                return StudentRepository.findAll();
            }

            @GetMapping(path = "/medina/{id}")
            public @ResponseBody Object get(@PathVariable Integer id) {
                if (StudentRepository.existsById(id)) {
                    return StudentRepository.findById(id);
                } else {
                    return "There is no existing Student with ID " + id;
                }
            }

            @PostMapping(path = "/medina/add") // Map ONLY POST Requests
            public @ResponseBody String addNewStudent(@RequestParam String firstname
                    , @RequestParam String lastname, @RequestParam String course, @RequestParam String studentnumber) {
                // @ResponseBody means the returned String is the response, not a view name
                // @RequestParam means it is a parameter from the GET or POST request

                Student n = new Student();
                n.setFirstname(firstname);
                n.setLastname(lastname);
                n.setCourse(course);
                n.setStudentnumber(studentnumber);
                StudentRepository.save(n);
                return "Success registering a new Student";
            }



            @PutMapping(path = "/medina/{id}")
            public @ResponseBody String updateMedinaSTUDENT(@PathVariable Integer id, @RequestBody Student updated) {
                Optional<Student> optionalStudent = StudentRepository.findById(id);
                if (optionalStudent.isPresent()) {
                    Student update = optionalStudent.get();

                    if (updated.getFirstname() != null) {
                        update.setFirstname(updated.getFirstname());
                    }
                    if (updated.getLastname() != null) {
                        update.setLastname(updated.getLastname());
                    }
                    if (updated.getCourse() != null) {
                        update.setCourse(updated.getCourse());
                    }
                    if (updated.getStudentnumber() != null) {
                        update.setStudentnumber(updated.getStudentnumber());
                    }
                    StudentRepository.save(update);
                    return "Success updating student";

                } else {
                    return "There is no existing STUDENT with ID " + id;
                }
            }

            @DeleteMapping(path = "/medina/{id}")
            public @ResponseBody String deleteCar(@PathVariable Integer id) {

                if (StudentRepository.existsById(id)) {

                    StudentRepository.deleteById(id);
                    return "SUCCESS DELETING STUDENT";
                } else {

                    return "Student with ID " + id + " not found";
                }
            }



            @GetMapping(path = "/medina/search")
            public @ResponseBody Object searchCarsByKey(@RequestParam String Key) {
                Iterable<Student> students = StudentRepository.findAll();
                List<Student> matchingStudents = new ArrayList<>();

                for (Student student : students) {
                    if (String.valueOf(student.getId()).contains(Key) ||
                            student.getFirstname().contains(Key) ||
                            student.getLastname().contains(Key) ||
                            student.getCourse().contains(Key) ||
                            student.getStudentnumber().contains(Key)) {

                        matchingStudents.add(student);
                    }
                }
                if (!matchingStudents.isEmpty()) {
                    return matchingStudents;
                } else {
                    return "No Student found for the provided " + Key;
                }
            }
        }